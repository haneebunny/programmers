// 콜라츠 추측
// 문제 설명
// 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

// 1-1. 입력된 수가 짝수라면 2로 나눕니다.
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
// 예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

// 제한 사항
// 입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

// 첫 번째 시도

function solution(num) {
  if (num % 2 === 0) {
    return parseInt(num / 2);
  } else {
    return num * 3 + 1;
  }
}

// parseInt() parseInt() 함수는 파라미터를 정수형으로 변환
// 정말 단순하게 홀/짝일 때를 나누어 생각해 보기 => 반복해서 1을 만들어야 하기 때문에 반복문을 추가로 사용해야 한다

function solution(num) {
  for (let i = 0; i < 500; i++) {
    if (num === 1) {
      // num이 1이 되는 순간의 i (반복한 횟수 0에서부터 시작, if 로직까지 다녀서 num이 바뀌었을 때가 1회 측정)
      return i;
    }

    num = num % 2 === 0 ? num / 2 : num * 3 + 1;
    // num이 짝수, 홀수 일 때에 따른 변경
  }
  return -1;
  // 500번 넘었을 때
}

// while 문 사용하기
function solution(num) {
  let answer = 0;
  while (num !== 1 && answer !== 500) {
    num % 2 === 0 ? (num = num / 2) : (num = num * 3 + 1);
    answer++;
  }
  return num === 1 ? answer : -1;
}

// while문은 조건문이 참일 때 실행되는 반복문이다. 조건은 문장안이 실행되기 전에 참, 거짓을 판단한다.
// for문처럼 반복 횟수를 체크할 부분이 따로 없기 때문에 변수 answer를 먼저 선언해서 이 answer의 횟수를 카운트한다.
// 최종 return은 num이 1일 때 answer, 500번이 넘으면(while 조건이기 때문에 500부터 while 문 돌지 않음) -1
