// 최대공약수와 최소공배수
// 문제 설명
// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

// 제한 사항
// 두 수는 1이상 1000000이하의 자연수입니다.

function solution(n, m) {
  // 유클리드 호재법
  // 최대공약수를 구하는 알고리즘(공식);
  // a를 b로 나눴을 때 (a>b인 경우) == 큰 수를 작은수로 나눴을 때
  // 나머지 값이 0이 되면, 작은 수 (b)가 최대공약수가 된다
  // 나머지 값이 0이 되지 않으면, 큰 수 (a)에 작은수 (b)를 할당하고
  // 작은 수(b)에는 나눴던 나머지 값을 할당
  // 반복해서 나머지 값이 0이 나오면, 이 때 나눴던 작은 수(b)가 최대공약수가 된다

  let a = Math.max(n, m); // 큰 수
  let b = Math.min(n, m); // 작은 수
  let r = 0; // a를 b로 나눴을 때의 나머지 값

  while (a % b > 0) {
    r = a % b; // 큰 수에서 작은 수를 나눈 나머지 값을 저장
    a = b; // 큰 수는 나눴을 때의 작은 수를 할당
    b = r; // 작은 수는 나머지 값을 할당
  }
  // 최소공배수를 구하는 공식 : 두 수를 곱한 값에 최대공약수를 나눈 값
  return [b, (n * m) / b];
}

// while문은 조건문이 참일 때 실행되는 반복문이다. 조건은 문장안이 실행되기 전에 참, 거짓을 판단한다.

// for
function solution(n, m) {
  // 최대공약수 : 두 수의 공통되는 약수 중에서 제일 큰 수
  // 최소공배수 : 두 수의 공통되는 배수 중에서 제일 작은 수
  const biggest = Math.max(n, m);
  // 두 개 중에 큰 수

  // 최대공약수 구하기
  let max = 0; // 공약수 중에서 제일 큰 수만 저장
  for (let i = 1; i <= biggest; i++) {
    if (n % i === 0 && m % i === 0) {
      max = i;
    }
  }

  // 최소공배수 구하기
  let min = 0; // 공배수 중에서 제일 작은 수만 저장
  for (let i = biggest; i <= n * m; i += biggest) {
    // 두 수 중 큰 수를, 두 수 중의 작은 수로 나누었을 때 0인 것이 최소 공배수
    // 만약 0이 되지 않으면, 큰 수의 배 로 늘려가기
    if (i % Math.min(n, m) === 0) {
      min = i;
      console.log(i, n, m);

      break;
    }
  }
  return [max, min];
}
